# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zrYQW-Dhf3VH_9s6_xncLAHjrfrRUkTq
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import pickle
import matplotlib.pyplot as plt
import seaborn as sns

col_names = ["duration", "protocol_type", "service", "flag", "src_bytes", "dst_bytes", "land", "wrong_fragment",
             "urgent", "hot", "num_failed_logins", "logged_in", "num_compromised", "root_shell", "su_attempted",
             "num_root", "num_file_creations", "num_shells", "num_access_files", "num_outbound_cmds",
             "is_host_login", "is_guest_login", "count", "srv_count", "serror_rate", "srv_serror_rate", "rerror_rate",
             "srv_rerror_rate", "same_srv_rate", "diff_srv_rate", "srv_diff_host_rate", "dst_host_count",
             "dst_host_srv_count", "dst_host_same_srv_rate", "dst_host_diff_srv_rate", "dst_host_same_src_port_rate",
             "dst_host_srv_diff_host_rate", "dst_host_serror_rate", "dst_host_srv_serror_rate", "dst_host_rerror_rate",
             "dst_host_srv_rerror_rate", "attack", "last_flag"]

df = pd.read_csv('Train.txt', sep=',', names=col_names)

df2 = pd.read_csv('KDDCup99.csv')

df.shape

df.head()

df.drop(['land', 'urgent', 'num_failed_logins', 'num_outbound_cmds'], axis=1, inplace=True)
df['attack'] = df['attack'].apply(lambda x: 'normal' if x == 'normal' else 'attack')

le = LabelEncoder()
for col in ['protocol_type', 'service', 'flag', 'attack']:
    df[col] = le.fit_transform(df[col])

X = df.drop('attack', axis=1)
y = df['attack']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)

rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)
# random forest classifier

print("Saving the model and scaler...")
with open('network_anomaly_model.pkl', 'wb') as model_file:
    pickle.dump(rf_model, model_file)

with open('scaler.pkl', 'wb') as scaler_file:
    pickle.dump(scaler, scaler_file)

# trained model and scaler

print("Evaluating the model on training data...")
y_train_pred = rf_model.predict(X_train)
print("Training Accuracy:", accuracy_score(y_train, y_train_pred))
print("Classification Report (Training):")
print(classification_report(y_train, y_train_pred))

# evaluation on training data

print("Evaluating the model on testing data...")
y_test_pred = rf_model.predict(X_test)
print("Testing Accuracy:", accuracy_score(y_test, y_test_pred))
print("Classification Report (Testing):")
print(classification_report(y_test, y_test_pred))

# evaluation on testing data

cm = confusion_matrix(y_test, y_test_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Normal', 'Attack'], yticklabels=['Normal', 'Attack'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# confusion matrix

